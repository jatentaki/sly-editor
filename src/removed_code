/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//here I store pieces of code that have been removed, but might be reintroduced in future

//these are inclusive, but 0-based
struct TextWindow {
    pub x1: usize,
    pub x2: usize,
    pub y1: usize,
    pub y2: usize,
}

fn should_blink() -> bool {
    (time::now().tm_nsec / 10i32.pow(8)) % 2 == 0
}

impl TextWindow {
    pub fn within_vec2(&self, i: &Vec2) -> bool {
        self.within((i.x, i.y))
    }

    pub fn within(&self, i: (usize, usize)) -> bool {
        i.0 >= self.x1 && i.0 <= self.x2 && i.0 >= self.y1 && i.1 <= self.y2
    }

    pub fn from_line(line_no: usize, x1: usize, x2: usize) -> Self {
        TextWindow {
            x1: x1,
            x2: x2,
            y1: line_no,
            y2: line_no,
        }
    }

    pub fn filter_cursors(&self, cursors: &Vec<Vec2>) -> Vec<Vec2> {
        cursors
            .clone()
            .into_iter()
            .filter(|&c| self.within_vec2(&c))
            .collect()
    }

    pub fn get_for_constraints_2(min: Vec2, max: Vec2) -> Self {
        TextWindow {
            x1: min.x,
            x2: max.x,
            y1: min.y,
            y2: max.y,
        }
    }

    pub fn get_for_constraints_1(min: Vec2) -> Self {
        TextWindow {
            x1: min.x,
            x2: MAX,
            y1: min.y,
            y2: MAX,
        }
    }
}

let textWindow = match self.last_view_size {
        Some(max) => TextWindow::get_for_constraints_2(self.position, max),
        None => TextWindow::get_for_constraints_1(self.position),
    };
